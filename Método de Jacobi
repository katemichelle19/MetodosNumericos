---Método de Jacobi:
Los métodos iterativos de Jacobi y Gauss-Seidel son los procesos de aproximaciones sucesivas para resolver sistemas de ecuaciones lineales 
compatibles determinados.Ambos requieren de la verificación de un criterio de convergencia comúnmente conocido como diagonal pesada.

-------Algoritmo----------//Método de Jacobi
metodo_jacobi:
  descripcion: "Algoritmo para encontrar soluciones aproximadas de un sistema de ecuaciones lineales"
  entrada:
    A: 
      tipo: matriz
      descripcion: "Matriz de coeficientes del sistema de ecuaciones"
    b:
      tipo: vector
      descripcion: "Vector de términos constantes"
    x0:
      tipo: vector
      descripcion: "Aproximación inicial de la solución"
    tol:
      tipo: float
      descripcion: "Tolerancia para el criterio de convergencia"
    max_iter:
      tipo: int
      descripcion: "Número máximo de iteraciones"
  salida:
    x:
      tipo: vector
      descripcion: "Solución aproximada del sistema de ecuaciones"
    iteraciones:
      tipo: int
      descripcion: "Número de iteraciones realizadas"
  algoritmo: |
    función jacobi(A, b, x0, tol, max_iter):
      n = tamaño de A[0]  # Número de ecuaciones/sistema de ecuaciones

      x = copiar(x0)  # Inicializar el vector solución
      x_nuevo = crear vector de longitud n
      iteraciones = 0

      mientras iteraciones < max_iter:
        para i de 0 a n-1:
          suma = 0
          para j de 0 a n-1:
            si j ≠ i:
              suma += A[i][j] * x[j]
          x_nuevo[i] = (b[i] - suma) / A[i][i]

        si norma_infinita(x_nuevo - x) < tol:
          devolver x_nuevo, iteraciones

        x = copiar(x_nuevo)
        iteraciones += 1

      devolver x, iteraciones
---------------------------------------------------------------------------------------

---IMPLEMENTACIÓN EN JAVA-----
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Pedir dimensiones de la matriz
        System.out.println("Ingrese el tamaño de la matriz (n x n):");
        int n = scanner.nextInt();

        // Pedir matriz de coeficientes
        System.out.println("Ingrese la matriz de coeficientes A (una fila a la vez):");
        double[][] A = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = scanner.nextDouble();
            }
        }

        // Pedir vector de términos constantes
        System.out.println("Ingrese el vector de términos constantes b:");
        double[] b = new double[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextDouble();
        }

        // Calcular solución utilizando el método de Jacobi
        double[] solucion = jacobi(A, b);

        // Mostrar resultado
        System.out.println("La solución aproximada del sistema de ecuaciones es:");
        for (int i = 0; i < n; i++) {
            System.out.println("x[" + i + "] = " + solucion[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b) {
        int n = A.length;
        double[] x0 = new double[n];
        double[] xNuevo = new double[n];

        // Inicializar x0 con ceros
        for (int i = 0; i < n; i++) {
            x0[i] = 0.0;
        }

        // Realizar un número fijo de iteraciones (en este caso, 50)
        for (int k = 0; k < 50; k++) {
            // Calcular nuevo valor de x
            for (int i = 0; i < n; i++) {
                double suma = 0.0;
                for (int j = 0; j < n; j++) {
                    if (j != i) {
                        suma += A[i][j] * x0[j];
                    }
                }
                xNuevo[i] = (b[i] - suma) / A[i][i];
            }

            // Actualizar x0
            for (int i = 0; i < n; i++) {
                x0[i] = xNuevo[i];
            }
        }

        return x0;
    }
}
