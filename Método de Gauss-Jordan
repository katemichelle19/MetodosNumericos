------Gauss-Jordan:
El método de eliminación Gauss-Jordan consiste en representar el sistema de ecuaciones por medio de una matriz y obtener a partir de ella 
lo que se define como la matriz escalonada equivalente, a través de la cual se determina el tipo de solución de la ecuación.

-------Algoritmo----------//Método de Gauss-Jordan
Entrada: Una matriz aumentada A (m x n)
Salida: La matriz A en su forma escalonada reducida por filas

Para k = 1 hasta m hacer:
    Para i = 1 hasta m hacer:
        Si i ≠ k entonces:
            Multiplica la fila k por -A[i,k]/A[k,k] y súmala a la fila i de A
            
    Divide la fila k por A[k,k]

    Para j = 1 hasta n hacer:
        Si j ≠ k entonces:
            Multiplica la columna k por -A[k,j]/A[k,k] y súmala a la columna j de A
-------------------------------------------------------------------------------------------------------

---IMPLEMENTACIÓN EN JAVA-----
import java.util.Scanner;

public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Ingrese el tamaño de la matriz cuadrada: ");
        int size = scanner.nextInt();
        
        double[][] matrix = new double[size][size + 1]; // Matriz aumentada
        
        System.out.println("Ingrese los elementos de la matriz aumentada fila por fila:");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size + 1; j++) {
                System.out.print("Elemento [" + (i + 1) + "," + (j + 1) + "]: ");
                matrix[i][j] = scanner.nextDouble();
            }
        }
        
        gaussJordan(matrix);
        
        System.out.println("La matriz en su forma escalonada reducida por filas es:");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size + 1; j++) {
                if (Math.abs(matrix[i][j] - (int)matrix[i][j]) < 1e-6) {
                    System.out.print((int)matrix[i][j] + "\t");
                } else {
                    System.out.print(matrix[i][j] + "\t");
                }
            }
            System.out.println();
        }
    }
    
    public static void gaussJordan(double[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        for (int k = 0; k < rows; k++) {
            // Pivoteo parcial
            int maxRow = k;
            for (int i = k + 1; i < rows; i++) {
                if (Math.abs(matrix[i][k]) > Math.abs(matrix[maxRow][k])) {
                    maxRow = i;
                }
            }
            double[] temp = matrix[k];
            matrix[k] = matrix[maxRow];
            matrix[maxRow] = temp;
            
            // Reducción
            for (int i = 0; i < rows; i++) {
                if (i != k) {
                    double factor = matrix[i][k] / matrix[k][k];
                    for (int j = k; j < cols; j++) {
                        matrix[i][j] -= factor * matrix[k][j];
                    }
                }
            }
            
            // Normalización
            double divisor = matrix[k][k];
            for (int j = k; j < cols; j++) {
                matrix[k][j] /= divisor;
            }
        }
    }
}

