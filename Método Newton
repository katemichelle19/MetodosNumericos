---Método de Newton:
El Método de Newton, también conocido como Método de Newton-Raphson, es un algoritmo iterativo para encontrar raíces de una función no lineal. 
El método es especialmente útil cuando se necesita una aproximación numérica rápida y precisa de las raíces de una función.

----Algoritmo-----
metodo_de_newton:
  descripcion: >
    Algoritmo del Método de Newton para encontrar raíces de una función no lineal.
  parametros:
    - funcion: "f(x)"
      descripcion: "La función para la cual se desea encontrar la raíz."
    - derivada: "f'(x)"
      descripcion: "La derivada de la función."
    - estimacion_inicial: "x0"
      descripcion: "Estimación inicial para la raíz."
    - tolerancia: "tol"
      descripcion: "Tolerancia para el criterio de convergencia."
    - max_iteraciones: "max_iter"
      descripcion: "Número máximo de iteraciones permitidas."
  pasos:
    - paso: "1"
      descripcion: "Inicialización"
      acciones:
        - seleccionar_estimacion_inicial: "x0"
    - paso: "2"
      descripcion: "Iteración"
      acciones:
        - calcular_nueva_estimacion: "xn+1 = xn - f(xn) / f'(xn)"
    - paso: "3"
      descripcion: "Convergencia"
      acciones:
        - verificar_criterio_de_convergencia: "|f(xn+1)| < tol o |xn+1 - xn| < tol"
        - continuar_iterando_o_finalizar: "Dependiendo del criterio de convergencia y max_iter"
-----------------------------------------------------------------------------------------------

---IMPLEMENTACIÓN EN JAVA-----
import java.util.Scanner;
import java.util.function.Function;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Ingrese la función f(x):");
        String funcionStr = scanner.nextLine();
        Function<Double, Double> funcion = x -> evaluarFuncion(funcionStr, x);

        System.out.println("Ingrese la estimación inicial para la raíz:");
        double estimacionInicial = scanner.nextDouble();

        System.out.println("Ingrese la tolerancia:");
        double tolerancia = scanner.nextDouble();

        double x = estimacionInicial;
        int iteracion = 0;

        // Definir el número máximo de iteraciones permitidas
        int maxIteraciones = 1000;

        while (true) {
            // Calcular el valor de la función y su derivada en x
            double fx = funcion.apply(x);
            double fpx = calcularDerivada(funcion, x);

            // Calcular la nueva estimación
            double nuevaEstimacion = x - (fx / fpx);

            // Verificar convergencia
            if (Math.abs(nuevaEstimacion - x) < tolerancia || iteracion >= maxIteraciones) {
                System.out.println("La raíz aproximada es: " + nuevaEstimacion);
                break;
            }

            // Actualizar x para la próxima iteración
            x = nuevaEstimacion;
            iteracion++;
        }

        scanner.close();
    }

    // Método para evaluar la función en un punto dado
    private static double evaluarFuncion(String funcionStr, double x) {
        return evaluarExpresion(funcionStr, x);
    }

    // Método para calcular la derivada numérica de la función en un punto dado
    private static double calcularDerivada(Function<Double, Double> funcion, double x) {
        double h = 0.0001; // Tamaño del paso para la aproximación numérica de la derivada
        return (funcion.apply(x + h) - funcion.apply(x)) / h;
    }

    // Método para evaluar una expresión matemática en un punto dado
    private static double evaluarExpresion(String expresionStr, double x) {
        // Convertir la expresión en una cadena con el valor de x sustituido
        String evaluada = expresionStr.replaceAll("x", Double.toString(x));

        // Evaluar la expresión y devolver el resultado
        return evaluar(evaluada);
    }

    // Método para evaluar una expresión matemática
    private static double evaluar(String expresionStr) {
        return new Object() {
            int pos = -1, ch;

            void nextChar() {
                ch = (++pos < expresionStr.length()) ? expresionStr.charAt(pos) : -1;
            }

            boolean eat(int charToEat) {
                while (ch == ' ') nextChar();
                if (ch == charToEat) {
                    nextChar();
                    return true;
                }
                return false;
            }

 doble análisis() {
 siguientecar();
 doble x = parseExpression();
 if (pos < expresiónStr.length()) lanzar nuevo RuntimeException ("Carácter inesperado:" + (char) ch);
 devolver x;
            }

 doble análisisExpresión() {
 doble x = parseTerm();
 para (;;) {
 si (comer ('+')) x += parseTerm(); // suma
 de lo contrario si (comer ('-')) x -= parseTerm(); //resta
 de lo contrario, devolver x;
                }
            }

 doble parseTerm() {
 doble x = parseFactor();
 para (;;) {
 if (comer('*')) x *= parseFactor(); //multiplicación
 si no si (comer ('/')) x /= parseFactor(); // división
 de lo contrario, devolver x;
                }
            }

 doble parseFactor() {
 if (eat('+')) return parseFactor(); //unario más
 si (comer ('-')) devolver - parseFactor(); //unario menos

 doble x;
 int startPos = this.pos;
 si (comer('(')) { // paréntesis
 x = parseExpression();
 comer(')');
 } else if ((ch >= '0' & ch <= '9') || ch == '.') { // números
 mientras que ((ch >= '0' & ch <= '9') || ch == '.') nextChar();
 x = Double.parseDouble(expresionStr.substring(startPos, this.pos));
 } else if (ch >= 'a' & ch <= 'z') { // funciones y variables
 mientras que (ch >= 'a' & ch <= 'z') nextChar();
 String func = expresionStr.substring(startPos, this.pos);
 x = parseFactor();
 si (func.iguals("sqrt")) x = Math.sqrt(x);
 else lanzar nuevo RuntimeException ("Función desconocida:" + func);
 } else {
 lanzar nuevo RuntimeException ("Carácter inesperado:" + (char) ch);
                }

 si (comer ('^')) x = Math.pow(x, parseFactor()); // exponente

 devolver x;
            }
 }.parse();
    }
}
